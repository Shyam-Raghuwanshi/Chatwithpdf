/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import { StatusBar, Text, View, TouchableOpacity, StyleSheet, Alert, ActivityIndicator } from 'react-native';
import {
  SafeAreaProvider,
} from 'react-native-safe-area-context';
import React, { useState } from 'react';

import {
  Client,
  Account,
  // Databases,
  OAuthProvider,
  // Avatars,
  // Storage,
} from "appwrite";
import { Linking } from "react-native";

const config = {
  platform: "com.chatwithpdf",
  endpoint: "https://nyc.cloud.appwrite.io/v1", // Your specific region endpoint
  projectId: "68a74c460028f0e4cfac", // Using the project ID from the client setup
  databaseId: "YOUR_DATABASE_ID", // Replace with your actual database ID
  scheme: "com.chatwithpdf",
};

const client = new Client()
  .setEndpoint(config.endpoint) // Use the same endpoint as in config
  .setProject(config.projectId);

const account = new Account(client);

async function login() {
  try {
    console.log('Starting OAuth login...');
    
    // Use localhost redirect URI (make sure this is added to your Google OAuth settings)
    const redirectUri = 'http://localhost:3000/oauth/callback';
    console.log('Using redirect URI:', redirectUri);
    
    const response = await account.createOAuth2Token(
      OAuthProvider.Google,
      redirectUri
    );

    console.log('OAuth response received:', response);

    if (!response) throw new Error("Create OAuth2 token failed");

    // The response should be a URL object, convert it to string properly
    let authUrl: string;
    if (typeof response === 'string') {
      authUrl = response;
    } else if (response && typeof response === 'object' && 'href' in response) {
      authUrl = (response as any).href;
    } else {
      authUrl = String(response);
    }

    console.log('OAuth URL:', authUrl);

    // Check if the URL is valid
    if (!authUrl || !authUrl.startsWith('http')) {
      throw new Error(`Invalid OAuth URL: ${authUrl}`);
    }

    // Open the OAuth URL and then check for session
    console.log('Opening OAuth URL:', authUrl);
    await Linking.openURL(authUrl);
    
    // Check for session creation (since we can't catch localhost redirect easily)
    return new Promise<boolean>((resolve, reject) => {
      let attempts = 0;
      const maxAttempts = 60; // 3 minutes
      
      const checkSession = async () => {
        attempts++;
        try {
          const session = await account.getSession('current');
          console.log('Session found:', session);
          resolve(true);
        } catch (error) {
          if (attempts >= maxAttempts) {
            reject(new Error('OAuth timeout - no session found. Please try again.'));
          } else {
            console.log(`Checking for session... attempt ${attempts}/${maxAttempts}`);
            setTimeout(checkSession, 3000);
          }
        }
      };
      
      // Start checking after user has time to complete OAuth
      setTimeout(checkSession, 5000);
    });
  } catch (error) {
    console.error('Login error:', error);
    Alert.alert(
      'Login Error',
      error instanceof Error ? error.message : 'An unexpected error occurred during login'
    );
    return false;
  }
}

function App() {

  return (
    <SafeAreaProvider>
      <StatusBar barStyle={'light-content'} />
      <AppContent />
    </SafeAreaProvider>
  );
}

function AppContent() {
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async () => {
    setIsLoading(true);
    try {
      const success = await login();
      if (success) {
        Alert.alert('Success', 'Login successful!');
      }
    } catch (error) {
      console.error('Login failed:', error);
      Alert.alert(
        'Login Failed',
        error instanceof Error ? error.message : 'An unexpected error occurred'
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity
        style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}
        onPress={handleLogin}
        disabled={isLoading}
      >
        {isLoading ? (
          <ActivityIndicator color="white" />
        ) : (
          <Text style={styles.loginButtonText}>Login with Google</Text>
        )}
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
    paddingHorizontal: 20,
  },
  loginButton: {
    backgroundColor: '#4285F4',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    minWidth: 200,
    alignItems: 'center',
  },
  loginButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  loginButtonDisabled: {
    opacity: 0.6,
  },
});

export default App;
